<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:mx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		title="HomeView" creationComplete="init()">
	<fx:Declarations>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.*;
			import mx.collections.ArrayCollection;
			//import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import org.iotashan.oauth.*;
			import model.ModelLocator;
			
			private static const CONSUMER_KEY:String = "PtALqcdKnjEepCbxXGSPpaqDrRg3LpXW";
			private static const CONSUMER_SECRET:String = "QKFGHGzVJ5Nr3Ms6BZXg6TgfLNXrf3kv";
			private static const SIMPLEGEO_BASE_URL:String = "http://api.simplegeo.com/1.0/";
			private static const SIG_METHOD:IOAuthSignatureMethod = new OAuthSignatureMethod_HMAC_SHA1();
			[Bindable] public var placesData:ArrayCollection;
			private var oAuthKeys:OAuthConsumer;
			private var simpleGeoService:HTTPService;
			[Bindable] public var _model:ModelLocator=ModelLocator.getInstance();
			
			import flash.events.GeolocationEvent;
			import flash.sensors.Geolocation;
			private var lat:String;
			private var lon:String;
			private var requestParams:Object = {"radius":"5"};
			
			private var geo:Geolocation;

			private function init():void
			{
				
				if (Geolocation.isSupported)
				{
					nosupport.text = "geolocation support.";
					geo = new Geolocation();
					geo.setRequestedUpdateInterval(100);
				}
				else
				{
					nosupport.text = "No geolocation support.";
				}
				
				if (geo.muted)
				{
					muted.text = "its muted";
				}
				else
				{
					muted.text = "its not muted";
				}
				simpleGeoService = new HTTPService();
				simpleGeoService.addEventListener(ResultEvent.RESULT, serviceResultHandler);
				simpleGeoService.addEventListener(FaultEvent.FAULT, serviceFaultHandler);
				oAuthKeys = new OAuthConsumer(CONSUMER_KEY, CONSUMER_SECRET);
			}
			
			private function loadLatLong():void
			{
				geo.addEventListener(GeolocationEvent.UPDATE, geolocationUpdateHandler);
				nVenue.text = "";
				aVenue.text = "";
				cVenue.text = "";
				sVenue.text = "";
				zVenue.text = "";
				pVenue.text = "";
			}
			
			private function geolocationUpdateHandler(event:GeolocationEvent):void
			{
				geo.removeEventListener(GeolocationEvent.UPDATE, geolocationUpdateHandler);
				lati.text = "latitude:" + event.latitude.toString();
				longi.text = "longitude:" + event.longitude.toString();
				this.lat = event.latitude.toString();
				this.lon = event.longitude.toString();
				fetchPlaces();
			}
			
			public function fetchPlaces():void 
			{
				simpleGeoService.url = getRequestUrl();
				simpleGeoService.send();
			}		
			
			private function getRequestUrl():String 
			{
				var reqUrl:String = SIMPLEGEO_BASE_URL + "places/" + lat +"," + lon + ".json";
				var tokenRequest:OAuthRequest = new OAuthRequest("GET", reqUrl, requestParams, oAuthKeys);
				return tokenRequest.buildRequest(SIG_METHOD);
			}
			
			private function parsePlaceName(item:Object):String 
			{
				return item.properties.name;
			}			
			
			private function serviceResultHandler(evt:ResultEvent):void {
				var jsonData:String = evt.result.toString();
				var simplaGeoData:Object = JSON.decode(jsonData);
				placesData = new ArrayCollection(simplaGeoData.features as Array);
			}
			
			private function serviceFaultHandler(evt:FaultEvent):void 
			{
				trace(evt.fault.faultString,"SimpleGeo Service Error");
			}
			
			private function venueSelect(evt:Event):void 
			{
				_model.nVenue = evt.currentTarget.dataProvider[evt.currentTarget.selectedIndex].properties.name;
				_model.aVenue = evt.currentTarget.dataProvider[evt.currentTarget.selectedIndex].properties.address;
				_model.cVenue = evt.currentTarget.dataProvider[evt.currentTarget.selectedIndex].properties.city;
				_model.sVenue = evt.currentTarget.dataProvider[evt.currentTarget.selectedIndex].properties.province
				_model.zVenue = evt.currentTarget.dataProvider[evt.currentTarget.selectedIndex].properties.postcode
				_model.pVenue = evt.currentTarget.dataProvider[evt.currentTarget.selectedIndex].properties.phone; 
			}
			
			private function loadScreenTwo():void 
			{				
				navigator.pushView(CheckInScreen);
			}
		]]>
	</fx:Script>
	
	<s:VGroup>
		<s:Label text="Check-In App"/>
		<s:Label id="nosupport" visible="false" includeInLayout="false"/>
		<s:Label id="muted" visible="false" includeInLayout="false"/>
		<s:Label id="lati" />
		<s:Label id="longi" />
		<s:Button click="loadLatLong()" label="Load Venues"/>
		<s:HGroup>
			<s:List dataProvider="{placesData}"
					labelFunction="parsePlaceName"
					x="10" y="10"
					width="440" height="450" click="venueSelect(event)"/>
			<s:Form id="myForm" width="350" height="325">
				<s:Label fontSize="16" text="Venue"/>
				<s:FormItem label="Name:">
					<s:Label id="nVenue" width="100%" text="{_model.nVenue}"/>
				</s:FormItem>
				<s:FormItem label="Address:">
					<s:Label id="aVenue" width="100%" text="{_model.aVenue}"/>
				</s:FormItem>
				<s:FormItem label="City:">
					<s:Label id="cVenue" width="100%" text="{_model.cVenue}"/>
				</s:FormItem>
				<s:FormItem label="State:">
					<s:Label id="sVenue" width="100%" text="{_model.sVenue}"/>
				</s:FormItem>
				<s:FormItem label="ZipCode:">
					<s:Label id="zVenue" width="100%" text="{_model.zVenue}"/>
				</s:FormItem>
				<s:FormItem label="Phone:">
					<s:Label id="pVenue" width="100%" text="{_model.pVenue}"/>
				</s:FormItem>
				<s:FormItem>
					<s:Button label="Next" click="loadScreenTwo()" width="120"/>
				</s:FormItem>				
			</s:Form> 

		</s:HGroup>		
	</s:VGroup>


</s:View>
